# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T11:48:22+00:00



import argparse
import json
import os
from typing import *

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, HTTPBearer

from models import AccountHalResponse, LocationHalResponse, LocationsHalResponse

app = MCPProxy(
    contact={
        'name': 'Vonage Business Cloud Support',
        'url': 'https://businesssupport.vonage.com/contactus',
    },
    description='The Vonage Business Cloud Account API enables you to retrieve information about accounts.\n\nYour application must subscribe to the Provisioning API suite to use this API.\n',
    termsOfService='https://www.vonage.com/business/legal-policy-center/business-cloud/tos',
    title='Account API',
    version='1.11.8',
    servers=[{'url': 'https://api.vonage.com/t/vbc.prod/provisioning'}],
)


@app.get(
    '/api/accounts/{account_id}',
    tags=['account_data_retrieval'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def account_ctrl_get_account_services_by_account_i_d(account_id: float):
    """
    Get account data by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/accounts/{account_id}/locations',
    tags=['account_data_retrieval', 'location_data_access'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def account_ctrl_get_locations_by_account_i_d(account_id: float):
    """
    Get account locations data by account ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/accounts/{account_id}/locations/{location_id}',
    tags=['account_data_retrieval', 'location_data_access'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def account_ctrl_get_location_by_i_d(account_id: float, location_id: float = ...):
    """
    Get location data by account ID and location ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
